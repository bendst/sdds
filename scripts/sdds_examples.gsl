.#  ===========================================================================
.#  Generate examples
.#
.#  This is a code generator built using the iMatix GSL code generation
.#  language. See https://github.com/imatix/gsl for details.
.#
.#  This script will generate the following files:
.#  ===========================================================================
.template 0

function ln_s (filename, linkname)
    my.shell = proc.new ("ln -s $(my.filename:) $(my.linkname:)")
    my.shell.run ()
endfunction

.endtemplate
.#
.#  Create examples or update existing
.#
.for example
.   if !file.exists ("$(example.name:c)")
.       directory.create ("$(example.name:c)")
.   endif
.   if !file.exists ("$(example.name:c)/generate.sh")
.       ln_s ("../../../scripts/generate.sh", "$(example.name:c)/generate.sh")
.   endif
.   if !file.exists ("$(example.name:c)/sdds.xml")
.       output "$(example.name:c)/sdds.xml"
<project
    name = "$(example.name:c)"
    script = "sdds.gsl"
    endian = "little"
    os = "$(example.os)"
    protocol = "AF_INET6"
    ip = "<your-IP>"
    >
    <!--
    Set Set interface and port for this project. Interface is required if your
    platform supports multiple e.g. Linux. The port is optional.
        iface = "ethX"
        port = "23456"
    >
    -->
    "$(string.trim (example.?""):left)"

    <!--
        Include your topic files here. You can include topics from multiple files.
        Only those topics will be generated that have at least one matching role.
    -->
    <include filename = "../topics/alpha.xml" />

    <!--
        Roles are bound to one topic and are either a publisher or subscriber.
        Publisher can have a list of subscriber to whom the should send data.
        If multicast discovery is enables no subscribers have to be entered.
    <role topic = "mytopic" type = "publisher">
        <subscriber ip = "fe80::12:13ff:fe14:1516" />
    </role>
    <role topic = "mytopic" type = "subscriber" />
    -->
    <role topic = "alpha" type = "publisher" />
    <role topic = "alpha" type = "subscriber" />

.   if example.os = "riot"
    <!--
        Config Options for RIOT os and 6LoWPAN
    -->
    <!--
	<define name = "UTILS_DEBUG"/>
    -->
    <define name = "SDDS_6LOWPAN_PANID" value = "0x0023"/>
    <define name = "SDDS_6LOWPAN_CHANNEL" value = "26"/>
    <define name = "TRANSPORT_IPV6_SDDS_PORT" value = "23234"/>
    <define name = "TRANSPORT_IPV6_SDDS_BUILTIN_MULTICAST_PORT_OFF" value = "20"/>
    <define name = "SDDS_6LOWPAN_RPL_ENABLED" />
    <!-- optinal setting -->
    <define name = "TRANSPORT_6LOWPAN_SDDS_TXPOWER" value = "-17"/>
    <!-- SDDS_6LOWPAN_RPL_ROOT_NODE_ADDR only one node in network-->
    <!--
    <define name = "SDDS_6LOWPAN_RPL_ROOT_NODE_ADDR" value = "2001:db8::1/64"/>
    -->
    
.   endif

    <!--
        This enables multicast discovery.
    -->
    <define name = "FEATURE_SDDS_MULTICAST_ENABLED" />
    <define name = "FEATURE_SDDS_BUILTIN_TOPICS_ENABLED" />
    <define name = "FEATURE_SDDS_DISCOVERY_ENABLED" />
    <!--
        Configure discovery intervals
    -->
    <define name = "SDDS_DISCOVERY_RECEIVE_TIMER" value = "1"/>
    <define name = "SDDS_DISCOVERY_PARTICIPANT_TIMER" value = "1"/>
    <define name = "SDDS_DISCOVERY_PUBLICATION_TIMER" value = "5"/>
    <define name = "SDDS_DISCOVERY_TOPIC_TIMER" value = "0"/>
    <!--
        Configure default history depth
    -->
    <define name = "SDDS_QOS_HISTORY_DEPTH" value = "1"/>
    <!--
        Enable all debug messages
    <define name = "UTILS_DEBUG"/>
    -->
</project>
.       close
.   endif
.   if !file.exists ("$(example.name:c)/.gitignore)")
.       output "$(example.name:c)/.gitignore"
$(example.name:c)
.       close
.   endif
.endfor
.
